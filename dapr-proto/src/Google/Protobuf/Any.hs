{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Google.Protobuf.Any where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
       (Parser, RawField)
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
       (Wrapped(..))
import qualified Unsafe.Coerce as Hs

data Any = Any{anyTypeUrl :: Hs.Text, anyValue :: Hs.ByteString}
         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)

instance Hs.NFData Any

instance HsProtobuf.Named Any where
        nameOf _ = (Hs.fromString "Any")

instance HsProtobuf.HasDefault Any

instance HsProtobuf.Message Any where
        encodeMessage _ Any{anyTypeUrl = anyTypeUrl, anyValue = anyValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Text) @(HsProtobuf.String Hs.Text) (anyTypeUrl))),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                      (anyValue)))])
        decodeMessage _
          = (Hs.pure Any) <*>
              (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @(Hs.Text)
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
                 @(Hs.ByteString)
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobufAST.Prim HsProtobufAST.String)
                (HsProtobufAST.Single "type_url")
                []
                ""),
             (HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobufAST.Prim HsProtobufAST.Bytes)
                (HsProtobufAST.Single "value")
                []
                "")]

instance HsJSONPB.ToJSONPB Any where
        toJSONPB (Any f1 f2)
          = (HsJSONPB.object
               ["type_url" .=
                  (Hs.coerce @(Hs.Text) @(HsProtobuf.String Hs.Text) (f1)),
                "value" .=
                  (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                     (f2))])
        toEncodingPB (Any f1 f2)
          = (HsJSONPB.pairs
               ["type_url" .=
                  (Hs.coerce @(Hs.Text) @(HsProtobuf.String Hs.Text) (f1)),
                "value" .=
                  (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                     (f2))])

instance HsJSONPB.FromJSONPB Any where
        parseJSONPB
          = (HsJSONPB.withObject "Any"
               (\ obj ->
                  (Hs.pure Any) <*>
                    (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @(Hs.Text)
                       (obj .: "type_url"))
                    <*>
                    (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
                       @(Hs.ByteString)
                       (obj .: "value"))))

instance HsJSONPB.ToJSON Any where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Any where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema Any where
        declareNamedSchema _
          = do let declare_type_url = HsJSONPB.declareSchemaRef
               anyTypeUrl <- declare_type_url Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               anyValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Any <*>
                         (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @(Hs.Text)
                            (HsJSONPB.asProxy declare_type_url))
                         <*>
                         (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
                            @(Hs.ByteString)
                            (HsJSONPB.asProxy declare_value))
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Any",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type_url", anyTypeUrl),
                                                        ("value", anyValue)]}})
