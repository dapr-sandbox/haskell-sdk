{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Google.Protobuf.Timestamp where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
       (Parser, RawField)
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
       (Wrapped(..))
import qualified Unsafe.Coerce as Hs
 
data Timestamp = Timestamp{timestampSeconds :: Hs.Int64,
                           timestampNanos :: Hs.Int32}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance Hs.NFData Timestamp
 
instance HsProtobuf.Named Timestamp where
        nameOf _ = (Hs.fromString "Timestamp")
 
instance HsProtobuf.HasDefault Timestamp
 
instance HsProtobuf.Message Timestamp where
        encodeMessage _
          Timestamp{timestampSeconds = timestampSeconds,
                    timestampNanos = timestampNanos}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   timestampSeconds),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   timestampNanos)])
        decodeMessage _
          = (Hs.pure Timestamp) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobufAST.Prim HsProtobufAST.Int64)
                (HsProtobufAST.Single "seconds")
                []
                ""),
             (HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobufAST.Prim HsProtobufAST.Int32)
                (HsProtobufAST.Single "nanos")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Timestamp where
        toJSONPB (Timestamp f1 f2)
          = (HsJSONPB.object ["seconds" .= f1, "nanos" .= f2])
        toEncodingPB (Timestamp f1 f2)
          = (HsJSONPB.pairs ["seconds" .= f1, "nanos" .= f2])
 
instance HsJSONPB.FromJSONPB Timestamp where
        parseJSONPB
          = (HsJSONPB.withObject "Timestamp"
               (\ obj ->
                  (Hs.pure Timestamp) <*> obj .: "seconds" <*> obj .: "nanos"))
 
instance HsJSONPB.ToJSON Timestamp where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Timestamp where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Timestamp where
        declareNamedSchema _
          = do let declare_seconds = HsJSONPB.declareSchemaRef
               timestampSeconds <- declare_seconds Proxy.Proxy
               let declare_nanos = HsJSONPB.declareSchemaRef
               timestampNanos <- declare_nanos Proxy.Proxy
               let _ = Hs.pure Timestamp <*> HsJSONPB.asProxy declare_seconds <*>
                         HsJSONPB.asProxy declare_nanos
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Timestamp",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("seconds", timestampSeconds),
                                                        ("nanos", timestampNanos)]}})

